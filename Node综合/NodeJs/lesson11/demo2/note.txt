//通过域（domain）来捕获一个异步异常：得到一个对象；否则会抛错throw new Error("async error");
{
    引入domain模块
    创建domain实例
    运行这个一步方法
    通过domain.on("error",callback)监听所捕获的异步异常

}
domain.run()：运行
domain.add()：添加一个事件
domain.bind(cb)：相当于run，与其不同烦人是：可以通过返回的cb传递参数
//[通过bind方法return一个回调函数（try过程），通过error捕捉异常（catch过程)]



11单元：异步编程【异步编程依托于回调来实现，但是使用回调不一定是异步编程】
NodeJS最大的特点：异步编程
异步的核心：回调函数
JS本身是单线程的，无法执行异步
try{}catch(){}是js自身提供的，NOdejs的process全局对象和domain对象
总结： 捕获异常{
		异步异常：{
            process全局对象的uncaughtException事件：捕获全局异常
            domain对象的error事件：捕获子域异常
		     }
		同步异常：try{}catch(){}
}
！：陷阱
    使用JS本身的try{}catch(){}时不会导致内存泄漏，但是使用Nodejs的uncaughtException或domain捕获异常
会导致内存泄漏问题
所以在使用时最好在处理完异常后重启程序较好。
